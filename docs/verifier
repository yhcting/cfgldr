-----
Usage
-----
* verify rule of config file.


-----
Rules
-----
* Basic syntax is same with config-file-syntax

* Key token SHOULD be 'regular expression(regex)' without white-space.

* Key value is used as RULE to check on config value.
  It SHOULD be python expression that can be evaluated by python 'eval' function.
  Returning True as result of evaluating rule, means 'Successfully verified.'
  False means 'Verification fails'

* Key token is try to be match with whole word. That is,
  It is like leading '^' and trailing '$' are added automatically.
  So, leading '^' and trailing '$' are reserved for different usage
  (See 'prefix' part below)

* Rule is checked with order - from top to bottom.
  That is, first described rule is matched at first.
  If matching rule for key name is found, value-verifying is proceeded.
  If it fails, result is failure.
  NOTE that, verifier DOESN'T move to next rules to find another rule.

* special prefix character is used at key.
  See 'special key syntax' at syntax documents at first.
  '^': mandatory key (key that should be defined.)
       Mandatory property may be overwritten by property of inherited key.
       << example >>
       @inherit (verifier) # '^key = [a-z]+' is defined. 'key' is mandatory.
       key = [a-z]+        # Now, 'key' is NOT mandatory.

* Following special function and variables are available(predefined) in rule.
   re: function: re(val, pattern, errmsg=None)
       Matching config value with given regular expression.
       ex. re(VAL, '^pattern$')
   fail: function: fail(errmsg=None)
       Verification always fails.
   cond: function: cond('my' in VAL.split(), 'Errmsg')
       Raise error exception with error message if condition fails
   VAL: string
       Config value under current verification.
       ex. 'VAL > 0'
   CNF: dictionary
       Having all configs under current verification session.
       Verifier can refer any configuration value in there rule.
       ex. re('^' + CNF.key0 + '|' + CNF.key1 + '$')

* Unmatched key patterns in verifier are ignored.
  And verification is processed after loading verifier configuration.
  Therefore, user may use temporal-unmatched key name as local key variable.
  ex. ___var := value
      key[0-9] = 1234(*___var)


--------------------
Custom rule verifier
--------------------
Users can use their own custom rule-verifier.
Following code is simple example.

    rule_verifier = {
        'cust_large_int': globals().get('_cust_vrf_large_int_rule')
    }
    ...
    load_config(fconf, fverifier, confdict, verifierdict,
                rule_verifier):

Note that this is used as local dictionary of 'eval' context of rule verifier.
That is, attrs. defined custom rule verifier overwrites existing predefined one.
And, string of exception - str(exception) - raised in verifier function is shown
  if verifier fails. errors.VerificationFailException may be used for it.
